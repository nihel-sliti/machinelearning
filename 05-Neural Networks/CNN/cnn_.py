# -*- coding: utf-8 -*-
"""CNN_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YY96L4cevnLNeoemqzstUlS5Gm9OMggX
"""

import numpy as np
from PIL import Image
import os
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from tensorflow.keras.utils import to_categorical

import glob
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

from google.colab.patches import cv2_imshow
import cv2
image = cv2.imread('/content/drive/MyDrive/CNN/cat.1.jpg')
gray1 =cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

cv2_imshow(image)
cv2_imshow(gray1)
cv2.waitKey(0)
cv2.destroyAllWindows()

files = glob.glob('/content/drive/MyDrive/CNN/*')

x_data = []
for myFile in files:
  image= cv2.imread(myFile)
  gray1 = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  im = cv2.resize(gray1, (200,200))
  x_data.append(np.array(im, 'uint8'))

def get_data_set(filepath):
    labels=[]
    print('Start reading files ..')
    for f in os.listdir(filepath):
        if(f.startswith('cat')):
            val=1
            labels.append(val)
        else:
           val=0
           labels.append(val)
    print('Reading files finished')
    return labels

labels = get_data_set('/content/drive/MyDrive/CNN/')
label=np.array(labels)

x_data1=np.array(x_data)
x_train, x_test,y_train,y_test=train_test_split(x_data1,label,test_size=0.33,random_state=0)

classifier = Sequential()
classifier.add(Convolution2D(128,3,3, input_shape = (200, 200,1), activation = 'relu'))
classifier.add(Convolution2D(64,3,3, input_shape = (200, 200,1), activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))

classifier.add(Flatten())
classifier.add(Dense( activation = 'relu',units = 512))
classifier.add(Dense( activation = 'relu',units = 128))
classifier.add(Dense( activation = 'sigmoid',units = 1))

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
history=classifier.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=50,batch_size=32)

plt.figure()

plt.plot(history.history['loss'], label='Loss (training data)')
plt.plot(history.history['val_loss'], label='Loss (validation data)')
plt.title('Loss ')
plt.ylabel('Loss value')
plt.xlabel('No. epoch')
plt.legend(loc="upper right")
plt.ylim(0,10)
plt.show()

plt.figure()

plt.plot(history.history['accuracy'], label='Accuracy (training data)')
plt.plot(history.history['val_accuracy'], label='accuracy (validation data)')
plt.title('Accuracy ')
plt.ylabel('accuracy value')
plt.xlabel('No. epoch')
plt.legend(loc="lower right")
plt.show()